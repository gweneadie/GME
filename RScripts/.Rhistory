freq = c(0.01, 2, 0.83, 9.1)
phase = c(pi/3, pi/8, -pi/2, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together
x = rowSums(x = signals)
plot(times, x)
K = 15
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75)
freq = c(0.01, 2, 0.83, 9.1)
phase = c(pi/3, pi/8, -pi/2, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together
x = rowSums(x = signals)
plot(times, x)
K = 15
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
K = 25
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 35
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
K = 5
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
plot(times, x)
K = 5
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", log="y", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
abline(v = freq, col="red")
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", ylim=c(0,4))
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
abline(v = freq, col="red")
lines(specmtls$freq, specmtls$P, lwd=2)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", ylim=c(0,4))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(times, x, xlab="time (days)", ylab = "Flux" )
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.5)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 5
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", ylim=c(0,4))
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
abline(v=4.4)
phase = c(pi/3, pi/8, -pi/2, 0, pi/5)
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 5)
freq = c(0.01, 2, 0.83, 9.1, 0.5)
phase = c(pi/3, pi/8, -pi/2, 0, pi/5)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.5)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 5
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", ylim=c(0,4))
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 15
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K)
specls = LSspec(x = x, t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75)
freq = c(0.01, 2, 0.83, 9.1)
phase = c(pi/3, pi/8, -pi/2, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.5)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
# make a density plot of the differences between times
plot(density(dif(times)))
# make a density plot of the differences between times
plot(density(diff(times)))
# make a density plot of the differences between times
hist(diff(times))
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
times = sort(rbeta(n = n, shape1 = 3, shape2 = 8))*1000
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75)
freq = c(0.01, 2, 0.83, 9.1)
phase = c(pi/3, pi/8, -pi/2, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.5)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
times = sort(rbeta(n = n, shape1 = 3, shape2 = 8))*100
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75)
freq = c(0.01, 2, 0.83, 9.1)
phase = c(pi/3, pi/8, -pi/2, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.5)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="x")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="xy")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.8)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 2)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.2)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 0.1)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 10
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
K = 8
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
lines(specmtls$freq, specmtls$P, lwd=2)
dev.off()
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 0.22)
freq = c(0.01, 2, 0.83, 9.1, 0.2)
phase = c(pi/3, pi/8, -pi/2, 0, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 8
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 18
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 28
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 7)
freq = c(0.01, 2, 0.83, 9.1, 0.2)
phase = c(pi/3, pi/8, -pi/2, 0, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 8
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
abline(v = freq, col="red")
dev.off()
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 2)
freq = c(0.01, 2, 0.83, 9.1, 0.2)
phase = c(pi/3, pi/8, -pi/2, 0, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 8
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
K = 4
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
K =1
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
dev.off()
K = 3
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
K = 6
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 2, 1.9, 1.8, 1.7)
freq = c(0.01, 2, 0.83, 9.1, 4, 4.2, 4.4, 4.5)
phase = c(pi/3, pi/8, -pi/2, 0, 0, 0, 0, 0)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
pars
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
# make a density plot of the differences between times
hist(diff(times), breaks = 25)
# make a density plot of the differences between times
hist(diff(times), breaks = 25, xlim=c(0,1))
# make a density plot of the differences between times
plot(density(diff(times)), xlim=c(0,1))
# make a density plot of the differences between times
plot(density(diff(times)), xlim=c(0,0.2))
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 6
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
# create a signal with multiple frequencies
Amps = c(3, 0.5, 1.1, 0.75, 2, 1.9, 1.8, 1.7)
freq = c(0.01, 2, 0.83, 9.1, 4, 4.2, 4.4, 4.5)
phase = c(pi/3, pi/8, -pi/2, 0, 0, 0, 0, pi/2)
# make matrix of the signal parameters
pars = matrix(data = c(Amps, freq, phase), nrow = length(Amps),
dimnames = list( paste("sig", 1:length(Amps), sep=""), c("A", "f", "phi")))
# calculate the sine signal for each A, f, and phase. This gives three columns, one for each signal
signals = apply(pars, MARGIN = 1, FUN = function(x) sinsignal(t=times, A = x[1], f=x[2], phi = x[3]))
# add the signals together and add some noise
x = rowSums(x = signals) + rnorm(n = n, mean = 0, sd = 1)
# make a density plot of the differences between times
plot(density(diff(times)), xlim=c(0,0.2))
plot(times, x, xlab="time (days)", ylab = "Flux" )
K = 6
specmtls = LSspecMT(t = times, x = x, w = (K+10)/(2*n), k = K, subtract.mean = TRUE)
specls = LSspec(x = (x-mean(x)), t = times)
plot(specmtls$freq, specmtls$P, type="n", xlab="frequency", ylab="PSD", log="y")
grid()
lines(specls$freq, specls$P, col=rgb(0,0,0.7, 0.5))
lines(specmtls$freq, specmtls$P, lwd=2)
abline(v = freq, col="red")
dev.off()
setwd("~/Documents/Research/GME/RScripts")
source("function_adaptive-burnin.r", "function_energy.r")
source(file = c("function_adaptive-burnin.r", "function_energy.r"))
source(file = list("function_adaptive-burnin.r", "function_energy.r"))
?source
ls()
list.files()
?list.files
list.files(pattern = "^[function]")
list.files(pattern = "^[f]")
list.files(pattern = "^[cf]")
q()
q()
